//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#import "lhConfig.h"

#ifdef LH_USE_BOX2D
#import <Foundation/Foundation.h>
#import "cocos2d.h"
#include "Box2D.h"

@class LHSprite;
@class LevelHelperLoader;

enum LH_JOINT_TYPE
{
	LH_DISTANCE_JOINT = 0,
	LH_REVOLUTE_JOINT,
	LH_PRISMATIC_JOINT,
	LH_PULLEY_JOINT,
	LH_GEAR_JOINT,
	LH_WHEEL_JOINT,
	LH_WELD_JOINT,
	LH_ROPE_JOINT,
	LH_FRICTION_JOINT,
    LH_UNKNOWN_TYPE
};

@interface LHJoint : CCNode
{
	b2Joint* joint; //week ptr
    b2World* boxWorld;
    NSString* uniqueName;

    int tag;
    LH_JOINT_TYPE type;
    
    __unsafe_unretained LevelHelperLoader* parentLoader;
    
    bool shouldDestroyJointOnDealloc;
    
    
    bool rope_showRepresentation;
    NSString* rope_textureName;
    int rope_z;
    bool rope_wasCut;
    int rope_numPoints;
	NSMutableArray *rope_points;
	NSMutableArray *rope_sticks;
	NSMutableArray *rope_sprites;
	CCSpriteBatchNode* rope_spriteSheet;
    int rope_segmentFactor;
	float antiSagHack;    
}
@property (readonly) NSString* uniqueName;
@property enum LH_JOINT_TYPE type;
@property (readwrite) bool shouldDestroyJointOnDealloc;
////////////////////////////////////////////////////////////////////////////////
+(id) jointWithDictionary:(NSDictionary*)dictionary 
                    world:(b2World*)box2d 
                   loader:(LevelHelperLoader*)pLoader;

+(id) ropeJointWithDictionary:(NSDictionary*)dictionary
                        joint:(b2RopeJoint*)ropeJt
                  loader:(LevelHelperLoader*)pLoader;

////////////////////////////////////////////////////////////////////////////////
-(b2Joint*)joint;
-(bool) removeJointFromWorld;

-(LHSprite*) spriteA;
-(LHSprite*) spriteB;

//remove itself from the world - make sure you dont retain this object
//if the box2d world is locked it will mark the joint for removal
//you need to call [loader removeMarkedJoints]; at the end of your tick method
-(void)removeSelf;


//helper methods - to get properties from the box2d joint

+(bool) isLHJoint:(id)object;
+(LHJoint*) jointFromBox2dJoint:(b2Joint*)jt;
+(int) tagFromBox2dJoint:(b2Joint*)joint;
+(NSString*) uniqueNameFromBox2dJoint:(b2Joint*)joint;

//this method will return LH_UNKNOWN_TYPE if fail
+(enum LH_JOINT_TYPE) typeFromBox2dJoint:(b2Joint*)joint;


-(void)resetRopeJoint;
-(bool)ropeWasCut;
-(bool)cutRopeJointsIntesectingWithLineFromPointA:(CGPoint)a
                                         toPointB:(CGPoint)b;
@end	
#endif
